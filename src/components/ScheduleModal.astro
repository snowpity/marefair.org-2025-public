---
import { Image } from "astro:assets";
import ratingExplicit from "@assets/schedules/RatingsVectorsExp.png";
import ratingQuestionable from "@assets/schedules/RatingsVectorsQuestionable.png";
import ratingSafe from "@assets/schedules/RatingsVectorsSafe.png";
import ratingSuggestive from "@assets/schedules/RatingsVectorsSuggestive.png";
import ratingUnrated from "@assets/schedules/RatingsVectorsUnrated.png";

interface Props {
    event: {
        name: string;
        description: string;
        business_name: string;
        rating: string | string[];
        startTime: Date;
        endTime: Date;
    };
    ratings: string[];
}

const { event, ratings } = Astro.props;
const rating = Array.isArray(event.rating) ? event.rating[0] : event.rating;

const bg_rating = ratings.includes(rating) ? {
    [ratings[0]]: "bg-white",
    [ratings[1]]: "bg-green-300",
    [ratings[2]]: "bg-cyan-300",
    [ratings[3]]: "bg-amber-300",
    [ratings[4]]: "bg-red-300",
}[rating] : "bg-white";

const ratingSrc = ratings.includes(rating) ? {
    [ratings[0]]: ratingUnrated,
    [ratings[1]]: ratingSafe,
    [ratings[2]]: ratingQuestionable,
    [ratings[3]]: ratingSuggestive,
    [ratings[4]]: ratingExplicit,
}[rating] : ratingUnrated;

const durationMs = event.endTime.getTime() - event.startTime.getTime();

// Get whole hours
const hours = Math.floor(durationMs / (1000 * 60 * 60));
// Get remaining minutes
const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

// Format start and end times as 12-hour format with AM/PM
const formatTime = (date: Date) => {
    const hours24 = date.getHours();
    const minutes = date.getMinutes().toString().padStart(2, '0');

    const hours12 = hours24 === 0 ? 12 : hours24 > 12 ? hours24 - 12 : hours24;
    const ampm = hours24 >= 12 ? 'PM' : 'AM';

    return `${hours12}:${minutes} ${ampm}`;
};

const startTimeFormatted = formatTime(event.startTime);
const endTimeFormatted = formatTime(event.endTime);
---

<input type="radio" name="schedule-event-toggle" id={`${event.name.replace(/\s+/g, '-')}-${event.startTime.toString().replace(/\s+/g, '-')}-toggle`} class="hidden"/>
<div id={`${event.name.replace(/\s+/g, '-')}-${event.startTime.toString().replace(/\s+/g, '-')}`} class="fixed w-screen h-screen z-30 opacity-0 pointer-events-none bg-black bg-opacity-60 transition-[opacity,backdrop-filter] duration-200">
    <label for="default-event-toggle" class="absolute inset-0 w-full h-full cursor-pointer"/>
    <div class={`absolute-centered ${bg_rating} w-[40rem] max-w-[100vw] max-h-[80vh] min-h-[25rem] overflow-y-auto h-auto rounded-xl p-10 shadow-xl shadow-black/30`}>
        <Image src={ratingSrc} alt={`Rating ${rating}`} width="100" class="float-right shadow-md shadow-black/30 ml-2 mb-2"/>
        <h2 class="text-2xl font-bold mb-4">{event.name}</h2>
        <p class="font-bold">Presented by: {event.business_name}</p>
        <p class="mb-4 font-bold">Time: {startTimeFormatted} - {endTimeFormatted}   ({hours}:{minutes.toString().padStart(2, '0')} hrs)</p>
        <p set:html={event.description.split('\n').join('<br>')}></p>
        {
            rating && !rating.includes('NOT A PANEL') ?
            (
                <p class="text-gray-700 text-sm mt-4">Rating: {rating}</p>
            )
            : ''
        }
    </div>
</div>