---
import Layout from "@layouts/Layout.astro";

import { getCollection } from 'astro:content';
import { marked } from 'marked';
import { getEntry } from "astro:content";
import type { NewsArticle } from '@data/NewsArticle';
import type { SEO } from "@data/SEO";

declare global {
  interface Window {
    copyToClipboard: () => void;
  }
}

export async function getStaticPaths() {
  const newsCollection = await getCollection('news');
  return newsCollection.map((entry: any) => ({
      params: { slug: entry.data.slug },
  }));
}

const { slug } = Astro.params;

const entry = await getEntry('news', slug);

// This should not be possible thanks to Astro statically built router, but just in case
if (!entry) return new Response(null, { status: 404 });

const article: NewsArticle = entry.data;

// Convert the Markdown content to HTML
const htmlContent = marked(article.content);

// Metadata for SEO
const SEOData: SEO = {
  site: 'https://marefair.org',
  site_name: "Mare Fair 2025",
  title: article.title,
  image: article.heroImage,
  description: article.previewText,
};
---

<Layout title={article.title} backgroundClass="bg-news-brick-texture" seo={SEOData}>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

  <div class="flex items-center justify-center min-h-screen p-8 pt-20">
      <!-- Main Article Container -->
      <div class="relative bg-[#F4EDEF] shadow-hard rounded-xl w-full max-w-4xl">
          <!-- "Menu" Button -->
          <div class="absolute -top-2 -left-6 rotate-[-5deg] overflow-visible">
              <a href="/" class="bg-gray-200 text-lg px-6 py-2 shadow-hard rounded-md hover:bg-gray-300 transform transition-transform duration-200 hover:scale-105 flex items-center gap-2">
                <span class="material-symbols-outlined">
                  arrow_back
                  </span>
                <div class="max-[450px]:hidden">  Menu </div>
              </a>
          </div>

          <!-- "Articles" Button -->
          <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 rotate-[0deg] overflow-visible">
            <a href="/news" class="bg-gray-200 text-lg px-6 py-2 shadow-hard rounded-md hover:bg-gray-300 transform transition-transform duration-200 hover:scale-105 flex items-center gap-2">
              <span class="material-symbols-outlined">
                newsmode
              </span>
              <div class="max-[450px]:hidden"> Articles </div>
            </a>
        </div>

          <!-- "Share" Button -->
          <div class="absolute -top-2 -right-6 rotate-[5deg] overflow-visible">
              <button class="dialogue bg-gray-200 text-lg px-6 py-2 shadow-hard rounded-md hover:bg-gray-300 transform transition-transform duration-200 hover:scale-105 flex items-center gap-2">
                  <span class="material-symbols-outlined">
                    share
                  </span>
                  <div class="max-[450px]:hidden"> Link </div>
              </button>
          </div>

          <!-- Article Content -->
          <div class="p-8 pt-11 px-5 md:px-8">
              <h1 class="text-4xl font-bold mb-4 text-left">{article.title}</h1>
              <p class="text-sm text-gray-500 mb-8 text-left">
                  Published on: {new Date(article.createdAt).toLocaleDateString()}
              </p>
              <article class="prose lg:prose-xl text-left text-gray-600 font-serif merriweather-regular min-w-full">
                  <div set:html={htmlContent}></div>
              </article>
          </div>
      </div>
  </div>

  <!-- Script for copy-to-clipboard functionality -->
  <script>
      import { injectTooltipStyles, showTooltipDialogueClick } from "@components/DialogueOnClick";
      const link = document.querySelector('.dialogue');

      if (link) {
          showTooltipDialogueClick(link, "Copied to Clipboard");

          link.addEventListener('click', (e) => {
              e.preventDefault();
              navigator.clipboard.writeText(window.location.href);
          });
      }

      injectTooltipStyles();
  </script>
</Layout>

<style>
  /* Hard drop shadows */
  .shadow-hard {
    box-shadow: 6px 10px 0px rgba(0, 0, 0, 0.5);
  }

  /* Main container styling */
  .rounded-xl {
    border-radius: 1rem;
  }

  /* Button styles */
  a, button {
    text-align: center;
    font-weight: bold;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  /* Matching hover effects */
  a:hover, button:hover {
    transform: scale(1.05);
    transition: transform 0.2s ease-in-out;
  }

  /* Article text styling */
  .marker-like {
    color: #4a4a4a;
    font-family: 'Permanent Marker', cursive, serif;
  }
</style>
